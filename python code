# code for typing speed calculation.
import time
import tkinter as tk
import threading
import random


class TypeSpeedGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Typing Speed Calculator")
        self.root.geometry("800x600")

        # selecting a random text from the file text.txt .
        self.texts = open("text.txt", "r").read().split("\n")
        self.frame = tk.Frame(self.root)

        # displaying the random text from the file  text.txt .
        self.sample_label = tk.Label(self.frame, text=random.choice(self.texts), font=("Helvetica", 18))
        self.sample_label.grid(row=0, column=0, columnspan=2, padx=5, pady=10)

        # space for users texting.
        self.input_entry = tk.Entry(self.frame, width=40, font=("Helvetica", 24))
        self.input_entry.grid(row=1, column=0, columnspan=2, padx=5, pady=10)
        self.input_entry.bind("<KeyRelease>", self.start)

        # space for displaying speed(wpm).
        self.speed_label = tk.Label(self.frame, text="Speed:\n0.00 WPM (Words Per Minute)", font=("Helvetica", 18))
        self.speed_label.grid(row=2, column=0, columnspan=2, padx=5, pady=10)

        #space for reset button.
        self.reset_button = tk.Button(self.frame, text="RESET", command=self.reset, font=("Helvetica", 24))
        self.reset_button.grid(row=3, column=0, columnspan=2, padx=5, pady=10)

        self.frame.pack(expand=True)

        self.counter = 0
        self.running = False

        self.root.mainloop()

    # function for checking the text's mistake.
    def start(self, event):
        if not self.running:
            if not event.keycode in [16, 17, 18]:
                self.running = True
                t = threading.Thread(target=self.time_thread)
                t.start()
        if not self.sample_label.cget("text").startswith(self.input_entry.get()):
            self.input_entry.config(fg="red")
            #text will be in red colour if typed text is wrong.
        else:
            self.input_entry.config(fg="black")
            #text will be in black colour if there is no wrong spelling .

        if self.input_entry.get() == self.sample_label.cget("text"):
            self.running = False
            self.input_entry.config(fg="green")
            # text will be in green colour if completed

    # function for time calculation .
    def time_thread(self):
        while self.running:
            time.sleep(0.1)
            self.counter += 0.1
            wps = len(self.input_entry.get().split(" ")) / self.counter
            wpm = wps*60 #equation for speed calculation.
            self.speed_label.config(text=f"speed:\n {wpm:.2f} WPM (Words Per Minute)")

    # function for reset button.
    def reset(self):
        self.running = False
        self.speed_label.config(text="Speed:\n0.00 WPM (Words Per Minute)")
        self.sample_label.config(text=random.choice(self.texts))
        self.input_entry.delete(0, tk.END)


TypeSpeedGUI()
